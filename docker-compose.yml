version: '2.3'
services:
  ## Microservice 1
  # Image api source
  image:
    image: busybox
    volumes:
      - ./image-api:/var/www/site

  # Image api reverse proxy
  image_nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    volumes_from:
      - image
    ports:
      - 8081:80
    links:
      - image_php:php

  # Image api php-fpm
  image_php:
    image: php:fpm-alpine
    volumes_from:
      - image

  # Image api logshipper
  image_filebeat:
    image: prima/filebeat:5-rc
    volumes:
      - ./filebeat.yml:/filebeat.yml
    volumes_from:
      - image
    links:
      - logstash
    networks:
      - elk  
      


  ## Microservice 2
  # Content api source
  content:
    image: busybox
    volumes:
      - ./content-api:/var/www/site

  # Content api reverse proxy
  content_nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    volumes_from:
      - content
    ports:
      - 8080:80
    links:
      - content_php:php

  # Content api php-fpm
  content_php:
    image: php:fpm-alpine
    volumes_from:
      - content
      

  # Content api log shipper
  content_filebeat:
    image: prima/filebeat:5-rc
    volumes:
      - ./filebeat.yml:/filebeat.yml
    volumes_from:
      - content
    links:
      - logstash
    networks:
      - elk  
      
      
## Lumen Microservice 3
  # Blog api source
  blog:
    image: busybox
    volumes:
      - ./blog:/var/www/site

  # Image api reverse proxy
  blog_nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    volumes_from:
      - blog
    ports:
      - 8082:80
    links:
      - blog_php:php

  # Blog api php-fpm
  blog_php:
    image: php:fpm-alpine
    volumes_from:
      - blog

  # Blog api logshipper
  blog_filebeat:
    image: prima/filebeat:5-rc
    volumes:
      - ./filebeat.yml:/filebeat.yml
    volumes_from:
      - blog
    links:
      - logstash
    networks:
      - elk        

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch
    
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk  
      
  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch    

networks:
  elk:
    driver: bridge
      
volumes:
  elasticsearch:      
      